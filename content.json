[{"title":"带你彻底理解Java中的final关键字","date":"2018-03-11T14:54:00.000Z","path":"2018/03/11/java_final/","text":"说来惭愧，我已经很久没有更新博客了。原因大概有二：其一是 主观上 笔者近来有些浮躁，难以静下心了进行总结与反思；其二则是 客观上 近几个月从公司的项目到个人的项目都非常的琐碎繁杂，已经完全透支了笔者的写作热情。 好在最近的历练的确使我有了方方面面的提升，以后会尽可能多地把技术分享带给大家。话不多说，本篇讨论的只有 Java 中的一个关键字——final。 final，顾名思义，是为 最终的、无法改变的。final可能被使用的情况有三种：数据、方法 和 类，下面笔者将分别说明这三种情况的差异。 final修饰数据数据分为两种类型：基本类型（boolean、byte、char、short、int、long、float、double）和对象。当final用于修饰基本类型时，代表其数值自初始化赋值后恒定不变。当final用于修饰对象引用时，代表其引用无法被改变。 即当x引用为一个Object时（final Object x = new Object();），不能再将x改为指向另一个对象。 值得注意的是，当final修饰对象引用时，虽然无法将引用“重定向”，但仍可以修改当前引用对象的成员变量，如使用set()方法等。另外，在Java中 数组也是对象，当final用于修饰数组引用时，数组内部元素仍可以被改变。 final修饰方法当final被用于修饰一个方法时，代表该方法是无法被 重写（override）的。任何被private修饰的方法，都隐式地指定为final。 我们都知道可以直接使用子类对象来代替父类对象作为参数传递，而不用担心发生类型转换的问题，这被称为 向上转型。实际上，在程序运行时，计算机会根据参数的类型选择相应的方法，如下。 123public void test(Father object)&#123; object.doSomething();&#125; 当程序员向test方法中传入Son对象时，计算机不会运行Father类中的doSomething()方法，而是 运行Son类中的doSomething()方法。因此，当运行一个被final修饰的方法时，计算机不需要判断当前对象的类型，这会带来微小的性能提升。但是，开发者往往无法预计当前编写的类在之后的漫长时间中会起到何种作用，所以不要单纯为了微小的性能提升而使用final修饰方法，除非开发者 明确禁止此方法被覆盖。 final修饰方法还有另外一个情况——用于修饰方法参数，这在 匿名内部类 中较为常见。这代表开发者无法在方法中修改此参数引用指向的对象。Java中每个类文件被编译成单独的class文件，内部类和外部类处于同样的等级。如果内部类方法中可以使用并修改外部类变量，则 内部类必须始终持有外部类的引用，这将可能导致外部类无法被回收掉。而Java这种规则，实际上是将参数拷贝一份拿来使用，不会影响外部类的垃圾回收工作。 final修饰类当某个类被定义为final时，代表该类不可被继承。由于类不可被继承，自然类中的任何方法都不可被重写（override）。也就是说，final类中的所有方法都被隐式地指定为final。","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"《50 Android Hacks》读书笔记41-50","date":"2017-10-10T10:15:00.000Z","path":"2017/10/10/50_android_hacks_5/","text":"Hack41 使用ORMLite构建数据库问题：Android ORMLite框架如何使用？ 解决方案：ORMLite 是一种对象关系映射工具，可用于读写数据库。使用该框架后，应用程序中所有数据库操作都通过ORMLite完成，而不需要手工编写任何SQL语句。该方法可以通过减少创建数据库schema的代码数量来节省时间。 使用ORMLite时最常用的两种注解是 DatabaseTable 和 DatabaseField。这些注解可以分别用于类及其成员变量，并允许生成最终的数据表。指定 generatedId=true 参数，该参数表示该字段是 主键。默认情况下，ORMLite使用类名作为SQL表名，使用成员变量名作为表的列名。 开发者需要注意的是ORMLite需要类中提供一个 无参构造方法。当ORMLite需要创建类的实例时，ORMLite会使用无参构造方法，并通过反射机制设置成员变量。 在某些情况下，开发者需要在某张表中保存外部对象的ID，这时需要使用 foreign=true 将其标记为 外键。更进一步讲，我们要确保父分类必须存在。因此，需要将成员表量声明如下： 123456@DatabaseField(foreign = true, foreignAutoRefresh = true, canBeNull = false, uniqueCombo = true, columnName = CATEGORY_ID_COLUMN, columnDefinition = \"integer references \" + Category.TABLE_NAME + \"(\" + Category.ID_COLUMN + \") on delete cascade\")private Category category; 在数据库创建的时候，需要继承 OrmLiteSqliteOpenHelper 类，继而重写onCreate()和onUpgrade()方法。需要注意的是，使用外键时，创建表和删除表的语句有严格的顺序。如果表2中引用了表1数据作为外键，则表2必须在表1创建之后再创建。同理，表2应在表1删除之前删除。 默认情况下，ORMLite的支持外键的功能并没有开启。要 支持外键，需要执行如下语句： 12345@Overridepublic void onOpen(SQLiteDatabase db) &#123; super.onOpen(db); db.execSQL(\"PRAGMA foreign_keys=ON;\");&#125; 最后，笔者在学习此项目时遇到了一个关于迭代器的小问题。使用 Iterator 类时，当 hasNext() 返回false，这个迭代器将调用 close() 方法。如果需要在迭代器关闭之前处理迭代器，请确保调用close()方法。 123456789101112void test() &#123; Iterator i = list.iterator(); try &#123; while(i.hasNext()) &#123; process(i.next()); &#125; &#125; finally &#123; if(i != null) &#123; i.close(); &#125; &#125;&#125; Hack42 为SQLite添加自定义功能问题：SQLite缺乏数学函数，能够支持自定义查询？ 解决方案：开发者可以使用 Android NDK，加载数据库数据后调用C++代码处理复杂的计算操作。 Hack43 数据库批处理问题：Android数据库中大量数据的替换及展示如何处理？ 解决方案：使用 ContentProvider 处理数据库操作时，可以返回一个 Cursor，当数据改变时，该Cursor会随之更新。然而，如果执行了大量数据库操作，Cursor会被频繁更新，这样会使 UI闪烁。 如果直接使用 contentResolver.insert(NoBatchNumbersContentProvider.CONTENT_URI, cv); 操作，用户体验很差，因为每执行一次数据插入操作都会提示ContentProvider发生变化，ListView自身也发生刷新；第二种方法是使用 批量操作。创建一个 ContentProviderOperations 的列表，然后批量处理列表项。然而即使使用了批量操作，闪烁情况照样会出现。因为 applyBatch() 方法默认循环遍历每一个操作，同样调用insert方法；正确的方法是，在ContentProvider的实现代码中对applyBatch()方法做一些修改。 幸运的是，有开发者已经完成了这部分工作。 如果要使用批处理操作，需要先继承SQLiteContentProvider。SQLiteContentProvider会将所有操作一并处理，成功后提示UI更新，因此不会发生闪烁的现象。 Hack44 处理熄灯模式问题：不同Android版本如何兼容代码？ 解决方案：开发者可以根据 Build.VERSION.SDK_INT 判断当前设备的Android版本，并根据不同版本运行不同的代码。 Hack45 在旧版本上使用新API问题：Android系统版本迭代的过程中，有哪些值得一提的新特性？ 解决方案： 要操作 SharedPreferences 类，需要获取一个 Editor 类，然后调用方法修改数据。所有相关修改都完成时，需要调用 commit() 方法。从Android v9版本开始，SharedPreferences.Editor提供了 apply() 方法用于替代 commit() 方法。apply()方法将修改内容提交到SharedPreferences内存缓存中，然后开始异步地将修改提交到存储设备上，可以有效地避免UI线程的耗时操作。 从Android v8开始，开发者可以向AndroidManifest中添加一个名为 android:installLocation 的属性，设置该属性后，应用程序可以安装到SD卡上。 Hack46 向后兼容的通知问题：Notification添加动作的功能如何使用？ 解决方案：Android的Jelly Bean版本发布时引入了新的通知API。通过新API，可以为通知添加动作。通过这些动作，可以在不需要进入应用程序的情况下，对通知做出相应。开发者应使用 NotificationCompat.Builder.addAction(R.drawable.youricon, ctx.getString(R.string.youraction), yourPendingIntent); 语句完成通知动作的添加。值得注意的一点是，部分手机不支持通知动作的添加，开发者请勿过度依赖该功能。 Hack47 使用Fragment创建Tab问题：如何在程序中实现左右滑动切换页面？ 解决方案：文中介绍的TabActivity已经是被淘汰的功能，请使用 ViewPager 组件实现滑动切换页面的需求。 Hack48 使用Apache Maven处理依赖关系问题：Android项目如何处理依赖关系？ 解决方案：Java项目大部分依然使用Apache Maven处理依赖关系，Android项目应该使用 Gradle 处理依赖关系。 Hack49 在root过的设备上安装依赖库问题：如何加速依赖库的构建？ 解决方案：开发者可以在 root 过的设备上提前 安装依赖库，从而加速项目的构建速度。 Hack50 使用Jenkins处理设备多样性问题：Jenkins如何使用？ 解决方案：Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。Jenkins可以帮助开发者完成单元测试、代码分析、管理插件、自定义打包等功能。","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"《50 Android Hacks》读书笔记31-40","date":"2017-10-09T09:09:00.000Z","path":"2017/10/09/50_android_hacks_4/","text":"Hack31 Android面向切面编程问题：Android如何使用切面编程？ 解决方案：面向切面编程是一种编程范式，通过分离横切关注点提高程序的模块化和组件化。其基本原理是：将横切关注点抽离到一个单独的切面中，同时将需要执行的业务逻辑代码放在单独或者不同模块中。 在Android中可以使用 AspectJ 这个库来实现切面编程。在gradle文件中使用 classpath ‘com.uphyca.gradle:gradle-android-aspectj-plugin:0.9.14’ 构建AspectJ支持。描述切面的代码如下： 123456789101112131415@Aspectpublic class LogAspect &#123; @Pointcut(\"within(com.manning.androidhacks.hack030.MainActivity)\") private void mainActivity() &#123; &#125; @Pointcut(\"execution(* onCreate(..))\") private void onCreate() &#123; &#125; @AfterReturning(pointcut = \"mainActivity() &amp;&amp; onCreate()\") public void logAfterOnCreateOnMainActivity() &#123; Log.d(\"TAG\", \"onCreate() has been called!\"); &#125;&#125; Hack32 使用Cocos2d-x美化应用程序问题：Android如何使用Cocos2d-x展示动画？ 解决方案：开发者可以使用Android NDK，导入 org.cocos2dx.lib 后调用C++代码处理动画效果。 Hack33 在Android上运行Objective-C问题：Android如何运行Objective-C？ 解决方案：Itoa 是一组托管于Github的开源项目，该项目实现了编译器、构建脚本和各种库，用于将Objective-C源代码构建为Android APK文件。 Hack34 在Android上运行Scala问题：Android如何运行Scala？ 解决方案：开发者可以使用 Simple Build Tool 这个开源的Scala构建工具处理Android项目中的Scala代码。 Hack35 同时发起多个Intent问题：用户发布图片时，拍照或选择图片两种Intent如何合并？ 解决方案：Intent.createChooser() 和 putExtra() 方法可以合并多个Intent。核心代码如下： 123456789Intent pickIntent = new Intent(Intent.ACTION_GET_CONTENT);pickIntent.setType(\"image/*\");Intent takePhotoIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);Intent chooserIntent = Intent.createChooser(pickIntent, getString(R.string.activity_main_pick_both));chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[] &#123; takePhotoIntent &#125;);startActivityForResult(chooserIntent, PICK_OR_TAKE_PICTURE); Hack36 在用户反馈中收集信息问题：如何获取到用户的设备信息？ 解决方案：关注用户反馈是确保应用程序成功的有效方式之一。如果用户需要发送反馈邮件，最好的处理方式是在反馈邮件中附加用户的设备信息。这意味着，从用户中获取一些重要的详细信息变得比较简单了。开发者需要创建 EnvironmentInfoUtil 工具类来收集用户设备信息，并将其添加到Email的 EXTRA_TEXT 并发送。 Hack37 向media ContentProvider添加MP3文件问题：添加媒体文件后，如何通知ContentProvider？ 解决方案：添加媒体文件成功后，通过 sendBroadcast() 方法发送广播。 Hack38 为ActionBar添加刷新动作问题：ActionBar如何使用？ 解决方案：在Android 3.0之后，Google对UI导航设计上进行了一系列的改革，其中有一个非常好用的新功能就是引入的 ActionBar，它用于取代3.0之前的标题栏，并提供更为丰富的导航效果。 重写 onCreateOptionsMenu() 和 onOptionsItemSelected() 方法，设置ActionBar的显示效果与点击事件。 Hack39 从Market中获取依赖功能问题：如何完成在当前程序中打开其他应用程序（如果设备上没有该应用则跳转到应用商店下载）的需求？ 解决方案：开发者首先应根据 程序包名 判断该应用是否安装在设备中，如果已经安装则通过Intent打开即可。反之，则通过 AlertDialog 打开Market。 Hack40 以后进先出方式加载图片问题：默认情况下，列表是没有选择行为的。如何设置列表的选择模式？ 解决方案：AsyncTask并不适合处理大量图片，也不会让开发者控制任务的优先级。作为替代方案，我们使用 java.util.concurrent 包中的执行器服务和一个优先级队列来指定请求图片的顺序。 从开发者的角度来说，每次加载大量图片并不是一个非常合理的行为，UI很有可能不会灵敏响应。从用户的角度来说，大量图片的加载体验也很一般。通用的设计方式是，大量图片分页加载，为图片列表提供下拉刷新和上划加载更多功能。","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"《50 Android Hacks》读书笔记21-30","date":"2017-09-29T14:38:00.000Z","path":"2017/09/29/50_android_hacks_3/","text":"Hack21 与Activity生命周期绑定的Broadcast Receiver问题：在Activity中使用Broadcast Receiver对象监听广播需要注意什么？ 解决方案：在Activity中自定义 Broadcast Receiver，重写 onReceive() 方法，根据接收到的广播执行代码。要注意根据Activity的生命周期决定Broadcast Receiver的生命周期。 Hack22 使用Android库项目时适用的架构模式问题：Android项目间如何共享代码？ 解决方案：在以前使用Eclipse的时候，开发者需要手动引入Jar文件，非常麻烦。Android Studio使用 Gradle 作为项目构建工具，能够提供最大的便利去构建工程。如果某个项目并没有提供相关的依赖包，Android Studio可以直接把该项目以 Module 的形式引入，两个Module之间的代码可以共享。 Hack23 同步适配器模式问题：同步适配器如何使用？ 解决方案：同步适配器框架是Android提供的一套移动端与服务端数据同步的解决方案，它具有以下优点——插件化结构、自动执行、自动检测网络、省电、有账户认证机制等。最常见的是用于备份，联系人同步等各种云同步功能。 SyncAdapter依赖于自定义账户和ContentProvider。SyncAdapter 类继承自 AbstractThreadedSyncAdapter，在构造方法中初始化需要用到的组件，比如初始化一个ContentResolver。除了构造方法外只有 onPerformSync() 方法需要实现，这是真正要运行的同步方法，这个方法运行在独立的线程中，其中可以进行联网耗时操作。 Hack24 处理空列表问题：使用列表展示数据时，列表为空怎么办？ 解决方案：在布局文件中，编写列表为空时要显示的TextView或ImageView，并设置其为 android:visibility=”gone”。在加载数据后判断列表是否为空，如果为空则将其显示出来。 Hack25 通过ViewHolder优化适配器问题：ViewHolder怎么用？ 解决方案：ListView已经很少被使用，在此我们讨论 RecyclerView 中ViewHolder的使用方式。Adapter对象是ListView和底层数据间的桥梁。Adapter用于访问数据项，并且负责为数据项生成视图。在RecyclerView中，Adapter 像是 ViewHolder的集合，ViewHolder负责绑定列表中的条目视图，而且可以被 回收 循环使用。 Hack26 为ListView添加分段标头问题：带有分段标头的列表如何创建？ 解决方案：在每个 ListItem 中加入一个 TextView 作为 Header，根据其首字母与前一项首字母相等与否决定Header是否可见。在ListView上方设置一个Header，获取页面最上方的Item的position，将其首字母设为最上方Header显示的内容。 Hack27 使用Activity和Delegate与适配器交互问题：委托模式如何使用？ 解决方案：委托模式是软件设计模式中的一项基本技巧。在委托模式中，有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。 在本项目中，所有业务逻辑从适配器中移到Activity中，通过一个委托接口调用Activity的方法删除对象。而当适配器需要使用Activity中的方法时，直接使用委托对象进行操作。实际上，传入的委托对象正是实现了 NumbersAdapterDelegate 接口的 Activity。 委托模式有效地避免了继承的滥用。 Hack28 充分利用ListView的头视图问题：ListView头视图如何使用？ 解决方案：其实 HeaderView 实际上也是Item的一种，只不过显示在顶部的位置，那么我们完全可以通过为其设置 ItemType 来完成。比较常见的实现方式为：继承 RecyclerView.Adapter 类并重写 onCreateViewHolder()、getItemViewType()、onBindViewHolder() 等方法，最后添加 addHeaderView()、getHeadersCount() 等方法。 Hack29 在ViewPager中处理转屏问题：在Activity中如何处理转屏？ 解决方案：可以在Activity中使用 setRequestedOrientation() 方法强制改变屏幕方向，但除了播放视频、开启游戏等情况以外，请勿轻易改变屏幕方向以免引起用户反感。 Hack30 ListView的选择模式问题：默认情况下，列表是没有选择行为的。如何设置列表的选择模式？ 解决方案：ListView中 choiceMode 属性可以设置列表的选择行为，如果需要ListView处理 选择行为，还需要创建自定义视图并实现 Checkable 接口。CheckBox是可获取焦点的控件，如果需要扩展其点击事件，则需将其设置为不允许获取焦点。 123android:clickable=\"false\"android:focusable=\"false\"android:focusableInTouchMode=\"false\"","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"《50 Android Hacks》读书笔记11-20","date":"2017-09-27T09:35:00.000Z","path":"2017/09/27/50_android_hacks_2/","text":"Hack11 为文本添加发亮的效果问题：如何设计一个显示高亮绿灯的数字时钟？ 解决方案：应先继承TextView类，并为其设置 digital-7.ttf 字体。在背景文件中添加两个TextView标签，第一个显示 88:88:88的阴影（半透明效果），第二个用于显示 当前时间。布局代码如下： 123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;merge xmlns:android=\"http://schemas.android.com/apk/res/android\" &gt; &lt;com.manning.androidhacks.hack011.view.LedTextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\" android:text=\"@string/default_time\" android:textColor=\"#3300ff00\" android:textSize=\"80sp\" /&gt; &lt;com.manning.androidhacks.hack011.view.LedTextView android:id=\"@+id/main_clock_time\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\" android:shadowColor=\"#00ff00\" android:shadowDx=\"0\" android:shadowDy=\"0\" android:shadowRadius=\"10\" android:textColor=\"#00ff00\" android:textSize=\"80sp\" /&gt;&lt;/merge&gt; 修改 android:shadowDx 和 android:shadowDy 属性的值可以改变阴影与文本之间的偏移。指定 android:shadowRadius 属性可以让用户产生一种 文本更亮 的错觉。为了产生一种发亮的效果，我们没有使用android:shadowDx和android:shadowDy属性，而是通过修改android:shadowRadius属性。 Hack12 为背景添加圆角边框问题：如何为TextView、Button等控件添加圆角边框？ 解决方案：可以修改控件的 background 或 style 属性，将其指定为 带有shape标签 的drawable文件。值得一提的是，在Android 5.0中出现了一个全新的控件——CardView。CardView被包装为一种布局，拥有多种圆角、阴影以及点击效果，可以给使用者带来非常好的交互体验。 Hack13 在onCreate()方法中获取View的宽度和高度问题：为什么onCreate()方法调用getWidth()和getHeight()方法返回值都是0？ 解决方案：在onCreate()方法中直接调用 getWidth() 和 getHeight() 方法时，视图正处于绘制阶段。只有在整个布局绘制完毕后，视图才能得到自身的宽和高，这个过程发生在onCreate()方法之后。开发者应通过View的 post() 方法解决该问题。 Hack14 VideoView的转屏处理技巧问题：如何处理视频的转屏操作？ 解决方案：首先，要让Activity能够处理转屏操作。要实现这个功能，需要在AndroidManifest.xml文件中相应的Activity标签中添加 android:configChanges=”orientation” 属性。配置该属性后，当屏幕旋转时，系统不会重启Activity，而是调用该Activity的 onConfigurationChanged() 方法。重写onConfigurationChanged()方法，在其中调用setVideoViewPosition()方法。在setVideoViewPosition()方法中，判断屏幕的朝向并根据结果对VideoView的位置做不同的处理。 Hack15 移除背景以提升Activity启动速度问题：有什么方法能提高复杂视图树的加载速度？ 解决方案：Android SDK中提供了 Hierarchy Viewer 工具，该工具可以用来检测未被使用的视图以减少视图树的层次。DecorView 是视图树的根节点，默认情况下框架层会以默认背景色填充窗口，而DecorView就是持有默认窗口背景图片的视图。如果使用不透明的界面或者自定义背景，那么就可以将Activity标签中的windowBackground属性设置为null。 Hack16 更改Toast显示位置的技巧问题：如何修改Toast显示的位置？ 解决方案：开发者可以使用 Toast.setGravity() 方法改变Toast默认位置。 Hack17 使用Gallery创建向导表单问题：当需要用户填充一个较长的表单时，有什么好的设计方式？ 解决方案：利用 Gallery 中的自定义视图创建一个向导表单，并通过Adapter进行数据绑定。 Hack18 在发布正式版本前移除日志语句问题：在开发过程中，开发者可能会打印一些日志来检查请求是否成功。有什么在发布正式版本前移除日志的办法？ 解决方案：ProGuard工具 可以移除不必要的代码，或者使用语义模糊的名称来重命名类、方法和变量，以此达到 压缩、优化 和 混淆 代码的目的。在Android Studio中，build.gradle文件内proguardFiles getDefaultProguardFile(‘proguard-android.txt’), ‘proguard-rules.txt’语句指定了ProGuard工具的执行目标。下面是常用proguard-rules的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#指定代码的压缩级别-optimizationpasses 5 #包名不混合大小写-dontusemixedcaseclassnames #不忽略非公共的库类-dontskipnonpubliclibraryclasses#不预校验-dontpreverify#屏蔽警告-ignorewarnings #混淆时记录日志-verbose #混淆时所采用的算法-optimizations !code/simplification/arithmetic,!field/*,!class/merging/* #保护注解-keepattributes *Annotation* # 保持哪些类不被混淆-keep public class * extends android.app.Fragment-keep public class * extends android.app.Activity-keep public class * extends android.app.Application-keep public class * extends android.app.Service-keep public class * extends android.content.BroadcastReceiver-keep public class * extends android.content.ContentProvider-keep public class * extends android.app.backup.BackupAgentHelper-keep public class * extends android.preference.Preference-keep public class com.android.vending.licensing.ILicensingService-keep class android.support.v4.** &#123; *; &#125;-keep class android.support.v7.** &#123; *; &#125;#保持 native 方法不被混淆-keepclasseswithmembernames class * &#123; native &lt;methods&gt;;&#125; #保持自定义控件类不被混淆-keepclasseswithmembers class * &#123; public &lt;init&gt;(android.content.Context, android.util.AttributeSet);&#125; #保持自定义控件类不被混淆-keepclasseswithmembers class * &#123; public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);&#125;#保持自定义控件类不被混淆-keepclassmembers class * extends android.app.Activity &#123; public void *(android.view.View);&#125; #保持 Parcelable 不被混淆-keep class * implements android.os.Parcelable &#123; public static final android.os.Parcelable$Creator *;&#125; #保持 Serializable 不被混淆-keepnames class * implements java.io.Serializable #保持 Serializable 不被混淆并且enum 类也不被混淆-keepclassmembers class * implements java.io.Serializable &#123; static final long serialVersionUID; private static final java.io.ObjectStreamField[] serialPersistentFields; !static !transient &lt;fields&gt;; !private &lt;fields&gt;&lt;span&gt;&lt;/span&gt;; !private &lt;methods&gt;; private void writeObject(java.io.ObjectOutputStream); private void readObject(java.io.ObjectInputStream); java.lang.Object writeReplace(); java.lang.Object readResolve();&#125;#不混淆资源类-keepclassmembers class **.R$* &#123; public static &lt;fields&gt;;&#125; #避免混淆泛型 如果混淆报错建议关掉-keepattributes Signature #移除Log-assumenosideeffects class android.util.Log &#123; public static int v(...); public static int i(...); public static int w(...); public static int d(...); public static int e(...);&#125; Hack19 使用Hierarchy Viewer工具移除不必要的视图问题：如何找出视图树中那些不必要的视图以及性能瓶颈？ 解决方案：Android SDK中提供了 Hierarchy Viewer 工具，可以用来查看视图树并分析视图树中各个视图在测量、布局、绘制阶段所消耗的时间。View节点中带有红色或黄色的点代表速度较慢的View对象。请注意，低性能并不表示一定有问题，特别像是ViewGroup对象，View的子节点越多，结构越复杂，性能越差。该工具还可以帮助开发者找到性能问题，只要察看每个View节点的性能指标（颜色点）就可以，你可以看到测量、布局或绘制最慢的View对象是哪个，这样就能快速确定要优先判断哪里出了问题。 请注意：出于安全性的考虑，Hierarchy Viewer只能连接 Android开发版手机 或是 模拟器。Hierarchy Viewer在连接手机时，手机上必须启动一个叫 View Server 的客户端与其进行socket通信。而在商业手机上，是无法开启View Server的，故Hierarchy Viewer无法连接到普通的商业手机。 Hack20 模型-视图-主导器（MVP）模式问题：MVP模式是什么？与MVC模式有怎样的区别？ 解决方案：MVP模式是MVC模式在Android上的一种变体，要介绍MVP模式就得先说说MVC模式。在 MVC模式 中，Activity应该是属于 View 这一层。而实质上，它既担任了View的角色，同时也包含一些Controller的东西在里面。这对于开发与维护来说不太友好，耦合度很高。把Activity的 View 和 Controller 抽离出来就变成了 View 和 Presenter，这就是 MVP模式。 MVP的好处大体来说有以下3点： Activity代码变得更加简洁。使用MVP模式之后，Activity就能瘦身许多了。每个Activity基本上只有FindView、SetListener以及Init的代码，其他的就是对Presenter的调用以及对View接口的实现。 这种情形下阅读代码就容易多了，而且开发者只要看Presenter的接口，就能明白这个模块都有哪些业务，很快就能定位到具体代码。Activity变得容易维护，以后要调整业务、增删功能也就变得简单许多。 方便进行单元测试。MVP模式中，由于业务逻辑都在Presenter里，开发者完全可以写一个PresenterTest的实现类继承Presenter的接口。只要在Activity里把Presenter的创建换成PresenterTest，就能进行单元测试了，测试完再换回来即可。 避免Activity的内存泄露。Android APP发生OOM的最大原因就是出现内存泄露造成APP的内存不够用，而造成内存泄露的两大原因之一就是Activity泄露和Bitmap泄露。 Activity是有生命周期的，用户随时可能切换Activity，当APP的内存不够用的时候，系统会回收处于后台的Activity的资源以避免OOM。采用传统的MVC模式，一大堆异步任务和对UI的操作都放在Activity里面。比如用户可能从网络下载一张图片，在下载成功的回调里把图片加载到Activity的ImageView里面，所以异步任务保留着对Activity的引用。这样一来，即使Activity已经被切换到后台（onDestroy方法已经执行），这些异步任务仍然保留着对Activity实例的引用，所以系统就无法回收这个Activity实例了，结果就是Activity泄露。Android的组件中，Activity对象往往是在堆里占最多内存的，所以系统会优先回收Activity对象。如果出现Activity泄露，应用程序很容易因为内存不够而OOM。采用MVP模式，只要在当前的Activity的onDestroy方法里，分离异步任务对Activity的引用，就能避免Activity泄露。","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"《50 Android Hacks》读书笔记1-10","date":"2017-09-22T09:34:00.000Z","path":"2017/09/22/50_android_hacks_1/","text":"近来发现一本非常好的Android工具书——《50 Android Hacks》，中文译名叫做 《Android开发必知的50个诀窍》。与其他开发类书籍不同的是，该书并不是系统地讲解每一个知识点，而是以 问题/解决方案 的形式提出开发过程中遇到的问题，并编写Demo程序给出合理的解决方案。本书适用于已经学习过Android开发的程序员，且每个项目对应的源代码都可以在Github 50AH-code 中下载。 对于笔者这种对Android开发有一定了解、希望学习到更好的解决方案的程序员来说，这本书非常受用。书中每一节内容对应一个Demo，简单粗暴地印证了 「Talk is cheap. Show me the code.」 这句名言。在此，我将书中值得注意的地方整理出来，以免遗忘。 Hack1 使用weight属性实现视图的居中显示问题：无论手机在水平还是竖直情况下，如何固定某View占据父视图的宽度（或高度）百分比？ 解决方案：利用ViewGroup的 weightSum 属性和子View的 layout_weight 属性设定View在ViewGroup中的百分比宽度或高度。 Hack2 使用延迟加载以及避免代码重复问题：构建一些相似的布局布局时，开发者是否可以使用同一套代码？有什么方法可以实现大型组件的“懒加载”？ 解决方案：布局中可以直接使用&lt;include/&gt;标签引入其他layout文件，还可以在其中指定属性或修改属性值。加载某些不需要立即呈现或用户可能并不需要的组件时，可以通过ViewStub实现View的延迟加载。ViewStub是一种不可见并且大小为0的视图，可以延迟到运行时填充布局资源。当ViewStub设置被可视或者inflate()方法被调用后，就会填充布局资源。 Hack3 创建定制的ViewGroup问题：当View大体相同但所处位置按规律排列时，有什么更好构建布局的方式？ 解决方案：当View大体相同时，可以使用自定义ViewGroup，更易于项目的维护。修改onMeasure()方法实现ViewGroup对其中View的位置及大小的测量，修改onLayout()方法实现子View的绘制。 Hack4 偏好设置使用技巧问题：能否使用系统的设置界面主题为应用程序列表美化？ 解决方案：利用带有 PreferenceScreen 的XML文件完成布局，代码及Nexus S API 24运行样式如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;PreferenceScreen xmlns:android=\"http://schemas.android.com/apk/res/android\" android:key=\"pref_first_preferencescreen_key\" android:title=\"Preferences\"&gt; &lt;PreferenceCategory android:title=\"User\"&gt; &lt;EditTextPreference android:key=\"pref_username\" android:summary=\"Username:\" android:title=\"Username\"/&gt; &lt;/PreferenceCategory&gt; &lt;PreferenceCategory android:title=\"Application\"&gt; &lt;Preference android:key=\"pref_rate\" android:summary=\"Rate the app in the store!\" android:title=\"Rate the app\"/&gt; &lt;Preference android:key=\"pref_share\" android:summary=\"Share the app with your friends\" android:title=\"Share it\"/&gt; &lt;com.manning.androidhacks.hack004.preference.EmailDialog android:dialogIcon=\"@drawable/ic_launcher\" android:dialogTitle=\"Send Feedback\" android:dialogMessage=\"Do you want to send an email with feedback?\" android:key=\"pref_sendemail_key\" android:negativeButtonText=\"Cancel\" android:positiveButtonText=\"OK\" android:summary=\"Send your feedback by e-mail\" android:title=\"Send Feedback\"/&gt; &lt;com.manning.androidhacks.hack004.preference.AboutDialog android:dialogIcon=\"@drawable/ic_launcher\" android:dialogTitle=\"About\" android:key=\"pref_about_key\" android:negativeButtonText=\"@null\" android:title=\"About\"/&gt; &lt;/PreferenceCategory&gt;&lt;/PreferenceScreen&gt; 另外，可以实现 OnSharedPreferenceChangeListener 接口来监测EditTextPreference中的文字的变化。 Hack5 使用TextSwitcher和ImageSwitcher实现平滑过渡问题：如何提升TextView、ImageView等组件切换内容的视觉体验？ 解决方案：使用 TextSwitcher 和 ImageSwitcher 添加换入和换出的动画效果，实现平滑过渡。该项目中使用android.R.anim.fade_in和android.R.anim.fade_out添加了淡入淡出效果。 Hack6 为ViewGroup的子视图添加悦目的动画效果问题：如何提升ListView等组件加载内容的视觉体验？ 解决方案：可以使用 ListView.setLayoutAnimation(new LayoutAnimationController(AnimationUtils.loadAnimation(this, R.anim.list_animation), delay)) 方法为ListView的每个条目添加透明度渐变动画和位移动画。值得一提的是，Android坐标系原点在屏幕的左上角，项目中从上而下位移到指定位置的代码如下： 1234567891011121314&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\" &gt; &lt;alpha android:duration=\"50\" android:fromAlpha=\"0\" android:toAlpha=\"1\" /&gt; &lt;translate android:duration=\"100\" android:fromYDelta=\"-100%\" android:toYDelta=\"0%\" /&gt;&lt;/set&gt; Hack7 在Canvas上显示动画问题：有没有API可以直接在Android屏幕上绘图？ 解决方案：Canvas类封装了所有绘图调用，我们可以 继承View类并重写其onDraw()方法，从而进行图像的绘制以及完成一些动画效果。笔者接下来会结合此项目源码设计并实现一款小游戏。 Hack8 附加Ken Burns特效的幻灯片问题：如何以幻灯片的形式展示多幅图片？ 解决方案：该项目中循环播放图片，并利用 AnimatorSet.playTogether() 方法随机使用一种动画模式。 Hack9 避免在EditText中验证日期问题：当用户需要在文本框里输入日期信息时，怎样设计才是最好的做法？ 解决方案：开发者都知道验证表单里的日期数据是极其令人讨厌的事，因为不同用户输入的方式也大不一样。因此，开发者可以开发一个与EditText相同的Button（使用Button标签下的android:background=”@android:drawable/edit_text”语句），点击该按钮后，一个弹出的DatePickerDialog组件为用户提供日期选择服务。 细心的读者可能会有这样的疑问：为什么不直接为EditText设置一个点击监听器，而非要使用Button呢？答案是：使用Button更安全，因为用户无法修改Button的文本内容。如果使用EditText，并且只设置了点击监听器，用户可以通过光标获取该控件的焦点，这样便可以绕过DatePicker控件直接修改EditText的文本内容。 Hack10 格式化TextView的文本问题：如何在TextView中添加不同样式的文本和链接？ 解决方案：开发者可以使用 Html.fromHtml(String) 方法在TextView的文本内容中嵌入HTML代码，要注意的是嵌入HTML代码之后调用 TextView.setMovementMethod(LinkMovementMethod.getInstance()) 将TextView设置为可点击状态。开发者还可以使用SpannableString类为字符串中的指定字符设置前景色与背景色。 请注意：在XML文本中，像“&lt;”和“&amp;”字符都是非法的。因此，为了在XML中插入非法字符，开发者可以使用&lt;![CDATA[……]]&gt;语句，省略号处的语句允许使用“&lt;”和“&amp;”等字符。","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"Civilization and Barbarity","date":"2017-08-23T17:30:00.000Z","path":"2017/08/23/civilization_and_barbarity/","text":"16年末的一个静谧的下午，我慵懒地睡了一个午觉后，毫无防备地听到了这首音乐，那一刻仿佛灵魂被什么东西击中。后来看了一些资料，得知此曲背后是一个关于印第安人的故事。 我想起了初中时候读过的阿瑟·柯南道尔一本书——《The Lost World》。也许很多人都以为 《福尔摩斯探案全集》 是柯南道尔的唯一作品，殊不知他的科幻小说同他的推理小说一样精彩。该书讲述了一支探险队到美洲某个高原探险，而这个高原上不仅有古老的 印第安部落，还生存着一些 史前生物（各种恐龙及其他已绝种生物）。 《The Lost World》最让人印象深刻的情节之一，是探险队发现了一片竹林，其中很多棵竹子上面有人的骨头。骨头并不是挂在枝杈上，而是紧紧地箍在主干上。探险队一行人谈论良久，仍没有搞清楚成因，直到后来他们被印第安部落发现。部落对外族人非常恐惧，对外族人的处罚是把他们从竹林上方的山崖顶推下去。因此才会有很多骨头挂在竹子上，实际上是像串肉串一样风干后形成的。 文学资料中大多用 野蛮 等字眼来形容这类部落或民族，而现代社会总是自诩为 文明。或许，古老的印第安部落族人也将自己称为 文明，而将外来入侵者归为 野蛮。 那么，文明与野蛮究竟有怎样的差别？我想，这世上几乎没有绝对的文明与野蛮，大抵都是野蛮的文明与文明的野蛮吧。 苍茫天地间的古老民族向生而死 向死而生今人哀吟一曲 慷慨悲歌也有音符无法承载的悲伤我看到每个人心里都有个孩子他们受了很重的伤以至于 只有到了游乐场孩子们才会出现文明会诞生、会崛起、亦会消亡世上一切终将归于 无那一刻人们能做的唯有歌唱","tags":[{"name":"来者可追","slug":"来者可追","permalink":"http://www.tingxiangshuixie.com/tags/来者可追/"}]},{"title":"Idea and Dream","date":"2017-03-13T21:11:00.000Z","path":"2017/03/13/idea_and_dream/","text":"17年春节回家过年，遭遇了人生中一场不大不小的意外，住了半个月院，人也消沉了一个多月。朋友开玩笑说“事业刚起步就摔了个大跟头”，可不是，当真是 摔了个大跟头 ，而且是 爬起来也走不了路 那种。 也许是冥冥中上苍给了我一个放松身心、休养生息的机会，可以放慢脚步、静下心来做一做诸多想做的抑或是未完成的事，可自己却一直也没打起精神。颓唐的时候看了许多影视、文字作品，庆幸无一不是佳作。而后感悟颇多，在这样一个月色很好的凉夜里，写下这篇关于 想法与梦想 的思考。 我是一个想象力蛮丰富的人，看到任何东西都会想着如果是我会怎么去设计。打个比方，我曾设想过 水果捞式朝鲜冷面 、 西红柿炒鸡蛋馅儿的水饺 或是 把菠萝做成细碎的果肉揉到白面里蒸馒头 ……对任何事都有兴趣去了解，但失去兴趣也非常快，缺乏行动力。谈到这儿，我想说说前阵子领导要我们每个人设计一款新产品的事儿。我提出来的是一个大约两年以前的想法，写给领导的报告如下。 一个关于移动应用的微不足道的小想法——公益生活（每个人都可以为公益社会尽一份力）123456789现如今随着全民综合素质的提高和移动互联网的飞速发展，越来越多的公益性的功能加入到了各种各样的APP中。以中国排名数一数二的互联网公司为例，腾讯旗下的微信在很早以前就有公益募捐、众筹等功能，而阿里巴巴旗下的支付宝包含丢失孩子的信息提示或是节能减排可兑换能量进而兑换真实的树苗进行植树造林的功能（蚂蚁森林）。形形色色的公益虽多，但做公益还有很长的路要走。xxx作为国家主办的综合新闻信息服务门户网站，作为全球网民了解中国的最重要窗口，更有义务当仁不让，为公益事业添砖加瓦。我关于公益性APP的设计有一下几点想法：失物招领以及走失老人、儿童的信息发布。互联网上不乏有相似的功能的网站，比如公安局失物招领系统、高校校内论坛等等，但要么是使用范围极小，要么是用户过少。有诉求的人们不知道该去哪儿发布消息，没有诉求的人们也不知道自己的举手之劳就可能帮别人很大的忙。因此，一个公益性的APP是相当大的用武之地的。下面来谈谈这个想法的实现过程中需要解决的几个问题。1.技术难度失物招领可以通过街道（或区域）索引完成，在用户量比较大的情况下服务器消耗比较大，还有可能会用到地图资源，可能需要其他公司的技术支持。另外为了争取到最大的用户量，只有手机客户端是一定不够的，一定要有网页端，需要前端、服务端支持或外包团队支持。2.运营难度一个公益性的东西想要推行是非常非常困难的，如果用户没有觉得从这个APP里得到什么，这个APP又不是刚需，那么想完全靠国民素质来支持该产品的使用量就是天方夜谭。除了依靠专业运营团队的帮助外，我想说的一点是——奖励机制。我们可以利用现有的资源，为所有做了好事的人按照其贡献提供一定的奖励。小奖励比如一些虚拟货币、代金券等等，大奖励比如我们可以给做出巨大贡献的人颁发一些证书、锦旗等等。随着用户不断地增加，产品也不断地获得认可，颁发的证书、锦旗无形之中也会获得社会性的认可（比如可以写在个人履历或简历中），而这反过来又刺激了用户去做更多的好事……这是一个不断滚雪球的正反馈过程。3.盈利难度想从公益产品中盈利很难，但并非不可能。首先可以建立打赏机制，如果失主通过平台找到了丢失的东西即可给平台及帮助失主的人打赏。在平台具有一定规模的时候，赞助商自然也就不请自来了。而且，我们还可以得到一些公益基金的支持。最后我想说，想做公益，任何时候下定决心都不算太晚，任何时候轻言放弃都为时尚早。 结果不出所料，所有想法随着一个新项目的到来不了了之。但很快博主得到一个特别有趣的消息，被领导视作最大竞争对手的今日头条公司，已经把一款相似的公益项目做成功一年有余了。 而就在几个月之后，一款名为 朝阳群众 的App风靡了北京城的大街小巷。 看着自己的想法一步步被别人实现并越做越大，心中悲喜交加。悲之无能为力，心有不甘；喜之想法可行，且有同行为公益事业献出微薄之力。多么希望自己也能参与到其中，而不是以 多走路 、 多支付 这样的鸡肋行动来满足自己碌碌无为的公益心。 在医院的病床上读完了《牧羊少年的奇幻之旅》，感触颇多。这本书一直强调一个词——【天命】，还有一句最为著名的话—— 当你无比渴望得到某些东西时，整个宇宙都会协力使你实现自己的愿望 。书中每个人物都曾梦到过一些事，也就是各自的天命，有些人毅然决然选择去追寻，而有些人选择了妥协或遗忘。 童话故事往往比现实生活多了一些奇妙元素。若在现实生活中有极好的运气，会梦到一些意想不到的思路，但是却永远没办法像童话一样梦见自己的梦想。有些人说，有了梦想活得很累，因为要不断地追求。殊不知没有梦想活得更累，焦虑始终困扰着你，无法平息。 愿你梦中所想，即是梦想 。","tags":[{"name":"来者可追","slug":"来者可追","permalink":"http://www.tingxiangshuixie.com/tags/来者可追/"}]},{"title":"聊一聊适合成年人玩的智力玩具","date":"2017-01-04T20:30:00.000Z","path":"2017/01/04/puzzle/","text":"每个男人心中都有一个小男孩，对于玩具的热爱，只是他们对于童年心中遗憾的弥补。 魔方魔方 与 华容道、独立钻石棋 一起被国外智力专家并称为 智力游戏界的三个不可思议。魔方最早是由匈牙利布达佩斯建筑学院厄尔诺·鲁比克教授在1974年发明的，最早的魔方为三阶魔方。 随着魔方风靡全球，越来越多其他类型的魔方被发明出来，如二阶到二十二阶、镜面魔方、SQ1魔方、金字塔魔方、斜转魔方、五魔方、球形魔方、齿轮魔方等等。 华容道华容道是古老的中国民间益智游戏，属于 滑块类游戏，就是在一定范围内，按照一定条件移动一些称作 块 的东西，最后满足一定的要求。 经证明，华容道标准开局的最快解法为 81 步。 独立钻石棋独立钻石棋，又称 单身贵族棋，源于18世纪法国的宫廷贵族的自我挑战类单人棋游戏，可以锻炼逻辑思维能力。游戏玩法似中国跳棋，但不能走步，只能跳。棋子只能跳过相邻的棋子到空位上，并且把被跳过的棋子吃掉。棋子可以沿格线横、纵方向跳，但是不能斜跳，剩下越少棋子越好。 游戏级别：最后剩下 6只或以上 棋子是 一般；剩下 5只 棋子是 颇好；剩下 4只 棋子是 很好；剩下 3只 棋子是 聪明；剩下 2只 棋子是 尖子；剩下 1只 棋子是 大师；最后剩下 1只，而且在 正中央 是 天才。 巧环巧环是依据数学的 拓扑原理，由梁、环、柄、绳、珠等结构元素组合而成的智力玩具，一般用金属、木头、绳索、玉石等材质制作。它是我国富有民族特色的一种智力游戏，亦是中国民间古典智力玩具的精粹。 巧环中最为著名的当属 九连环。九连环是中国传统民间智力玩具。以金属丝制成9个圆环，将圆环套装在横板或各式框架上，并贯以环柄。把玩时，按照一定的程序反复操作，可使9个圆环与柄分开，或合二为一。 孔明锁孔明锁，相传是三国时期诸葛孔明根据八卦玄学的原理发明的一种玩具，曾广泛流传于民间。逐渐得到人们的重视，它对放松身心，开发大脑，灵活手指均有好处。它是老少皆宜的休闲玩具。孔明锁看上去简单，其实内中奥妙无穷，不得要领，很难完成拼合。 这只是传说之一。另外一种传说是：传说春秋时代鲁国工匠鲁班为了测试儿子是否聪明，用6根木条制作一件可拼可拆的玩具，叫儿子拆开。儿子忙碌了一夜，终于拆开了。这种玩具后人就称作鲁班锁．其实这只是一种传说．它起源于中国古代建筑中首创的 榫卯 结构。 所以，孔明锁亦称 鲁班锁 、别闷棍 、六子联方 、莫奈何 、难人木等。 魔金魔金，又称 Cast Puzzle，起源于19世纪英国，发展于20世纪日本，21世纪来到中国。规则很简单，把金属部分分开，再重新组合。其拥有散发着神秘感的巧妙造型和变化多端的奇妙结构常常会给玩家带了奇妙的乐趣，当然也可能百般尝试仍毫无进展。","tags":[{"name":"思者无惑","slug":"思者无惑","permalink":"http://www.tingxiangshuixie.com/tags/思者无惑/"}]},{"title":"Hello World","date":"2016-12-27T14:58:00.000Z","path":"2016/12/27/hello_world/","text":"特别遗憾自己在大学的时候没有写博客的觉悟，如果从那个时候就坚持去记录一些东西的话，无论内容如何，积累到如今总归会有一个令人惊讶的数值的。这世上有太多的事逝去后才追悔莫及，所谓 往者不可谏。但是往往愈令人后悔的事，愈给人以深刻的教训，所谓 往者可鉴。 值得庆幸的是 来者犹可追。在大学毕业后在CSDN上写了几篇博客，编辑器排版不好用是一方面，每次修改文章都要经过审核实在是不方便。终于在一些前辈们的刺激下，萌生了注册个人域名搭博客的想法。 折腾了两三天的时间，从购买域名到利用 Hexo 和 Github Pages 搭建再到主题的选择及替换，每完成一步都收获一份喜悦。几乎所有的英文单词域名都早已被注册过了，索性我选择拼音 听香水榭 作为域名，竟然成功了。那种心情一时间很难形容，我仿佛打开了封闭已久的屋子的一扇窗户，可以向世界发出自己的声音而不是通过别人带话了。 感谢前辈们的辛勤努力，感谢开源社区。 这是 我的地盘，我做主。这里没有广告，没有言论限制，没有操作频率限制。博主不会写软文，也不会写心灵鸡汤。这里共有4个版块： 往者可鉴（工作及平时学习的技术分享） 来者可追（生活琐记） 思者无惑（博主搜集到的智玩的介绍及解法） 行者无疆（游记） 无论到此的是亲朋好友还是天涯过客，我都要对你说一句——见到你很高兴。 最后以我曾写的三行情诗作为结尾： 初次遇见你让我想起了人类的第一个程序hello, world","tags":[{"name":"来者可追","slug":"来者可追","permalink":"http://www.tingxiangshuixie.com/tags/来者可追/"}]},{"title":"Android开发之版本更新及自定义通知详解","date":"2016-12-11T17:30:00.000Z","path":"2016/12/11/android_download_and_notification/","text":"我现在真的羡慕iOS开发程序员，他们既不用考虑应用升级，更不用处理机型适配这些令人头疼而无意义的问题。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——题记 本文将从以下几个方面详解Android开发版本更新及自定义通知的那些坑。 Service下载文件要注意的小细节 Android高版本通知图标无法显示（出现白框） 通知图标只能显示中间的一部分，无法显示完整 高版本通知提示无法在状态栏中显示 自定义通知文字颜色适配 Service下载文件要注意的小细节国内Android应用市场繁杂，几乎没人使用Google Play下载和升级软件。所以，应用程序升级变成了每个APP开发者的任务。Android系统下载文件一般有三种方式：Activity中开启一个线程下载、利用系统DownloadManager下载 和 使用Service在后台下载。第一种方式下载时Activity无法关闭，使用起来非常不方便；系统提供的DownloadManager比较好用，开发者几乎不用考虑任何事情只需要提供下载链接就可以，但是DownloadManager的外观及细节实在做的太差。因此，大多数Android产品使用第三种下载方式——Service。 笔者在Service的 onHandleIntent() 方法中接收到MainActivity传入的下载链接，并使用 HttpURLConnection 进行文件下载，业务流程非常简单，此处不再赘述。 一个小细节：在MainActivity中应判断下载文件的Service是否运行，如果已经在下载则提示版本更新弹窗，一方面提高用户体验，另一方面防止Service被多次开启引发程序异常。 12345678910public boolean isWorked() &#123; ActivityManager myManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE); ArrayList&lt;ActivityManager.RunningServiceInfo&gt; runningService = (ArrayList&lt;ActivityManager.RunningServiceInfo&gt;) myManager.getRunningServices(Integer.MAX_VALUE); for (int i = 0; i &lt; runningService.size(); i++) &#123; if (runningService.get(i).service.getClassName().equals(\"your package.DownloadService\")) &#123; return true; &#125; &#125; return false;&#125; 自定义Notification使用了Service下载，为了不影响用户操作就不应该使用Activity或是Dialog等更新下载进度，那么我使用在 Notification 加入 ProgressBar 来更新下载进度并通知用户是否更新。而为了显示更全面的信息，如下载进度、当前下载速度等等，我选择使用自定义Notification来完成。（由于产品设计APP主要以iOS系统为参照，安卓版本更新部分并没有任何涉猎，于是这部分功能全权交给我去设计完成，我便走上了一条自己给自己挖坑的 不归路。） 笔者设计的通知布局如下：左侧显示应用程序的图标；右侧上部显示“xx程序正在下载”，下载结束后显示“下载完成，请点击安装”；后侧中部显示进度条；右侧下部包含两个文本框，分别显示当前下载速度和当前下载进度百分比。 Android高版本通知图标无法显示（出现白框）做好这一切后，笔者迫不及待地在测试机跑了一遍程序，遇到了自定义Notification的第一个坑——在Android 5.0版本以前通知可以正常显示，但5.0及以后的版本状态栏中只能显示出一个白色方框，如下图所示： 究其原因，是Android系统开发者为了统一UI样式，限定在Android 5.0版本之后，状态栏显示的图标必须只能是 白色 的。这显然为难不了我，甚至不需要跟产品和美工提需求，自己三下五除二用PS抠好了图。 在构造Notification的时候判断版本，SDK低于21 选用 彩色图标，大于等于21 选用 纯白色图标，最终结果如下： 通知图标只能显示中间的一部分，无法显示完整如果直接把程序图标（ic_launcher）设置为Notification的SmallIcon，某些机型出现的问题是状态栏只能显示图标的中间一部分，无法显示完整。 原因是原图标（144* 144）过大，将其 重命名 并改为 48* 48 并放在 xhdpi 即可显示正常。这个问题在网上很普遍并且较易解决，在此不予演示。 高版本通知提示无法在状态栏中显示通知时提示的文字在Android 5.0之后不显示了。跟上述图标白框问题相似，Android系统开发者在5.0之后 禁用状态栏显示文字（setTicker()方法），相仿iOS系统在手机上部出现 通知弹窗 。因此，需要在构造通知时判断版本，SDK低于21 使用 setTicker() 方法，大于等于21 使用 setFullScreenIntent() 方法，最终结果如下： 自定义通知文字颜色适配最后一个坑也是最让人头疼的坑，则是不同的Android手机的自定义Notification的文字颜色适配。市场上流通的Android手机有无数种样式的通知栏，如果指定了文字颜色会出现与特殊机型的背景颜色相近而影响美观的问题。而这个问题一般有两种解决方式： 干脆连同通知背景颜色也指定，保证黑底白字或白底黑字，不考虑通知栏的背景颜色。 获取到当前系统通知栏及通知的颜色数据，根据不同版本做适配。 第一种解决方式显然并不完美，很容易在某些机型出现“极其违和”的通知样式，对于一个完美主义者来说这是无法容忍的，于是我义无反顾地选择了第二种解决方式。 为了给用户带来较好的使用感受，将自定义Notification的布局北京设置为 透明，这样无论图片文字还是进度条看起来都是“嵌入到通知栏背景”中。在Android 5.0版本前， 通知栏的背景以黑色（灰色）为主，而在其之后通知栏以白色为主。笔者灵机一动，不指定TextView的文字颜色，是否就是系统默认的颜色呢？经测试此方法在低版本机型成功率较高，高版本普遍出现了问题。因为TextView的背景颜色并不等同于通知栏的背景颜色，所以文字颜色（可以理解为背景颜色的相反颜色，即对比色）也并不一定相近。 第一种方式失败之后，笔者查阅资料，有另外一种解决方式是我们可以先构造一个Notification（并不发出通知）并获取其中title的 颜色，这样我们可以在自定义Notification沿用 该颜色，代码如下： 1234567private int getNotificationColor() &#123; NotificationCompat.Builder builder = (NotificationCompat.Builder) new NotificationCompat.Builder(this); Notification notification = builder.build(); ViewGroup viewGroup = (ViewGroup) notification.contentView.apply(this, new LinearLayout(this)); TextView title = (TextView) viewGroup.findViewById(android.R.id.title); return title.getCurrentTextColor();&#125; 但在高版本机型依旧出现 空指针异常 的问题， Notification.contentView 为空，具体原因笔者没有深入研究，大概是低版本系统Notification也像是自定义Notification一样使用了 系统提供 的 RemoteViews，而高版本已经不再使用这种方式构造通知。 最终笔者选择的解决方式是设置TextView中的 textAppearance属性，SDK低于21 使用 android:TextAppearance.StatusBar.EventContent.Title 样式，大于等于21 使用 android:TextAppearance.Material.Notification.Title 样式，几乎能适配大部分系统。但仍有一部分手机开发者改变了原生Notification的背景，比如笔者的一款测试机——三星S5，黑色半透明通知栏+白色通知背景+黑色文字。 这样使用的 文字颜色（黑色）直接放在 通知栏 处（黑色）非常冲突，而这个问题笔者想了好久，尝试获取到通知栏背景色从根本上解决这一问题，但似乎官方并没有给出任何方法。何况很多手机更改了系统状态栏，背景颜色并不是一个值，而是有不同颜色的一幅图片，想去获取颜色恐怕只能用Bitmap去解析几个点的 ARGB 值了。 总结希望Google官方以及各个手机厂商的开发者们能够在追求UI与众不同的时候，考虑一下其他Android开发者们做适配的难处，能够提供出通知栏的背景颜色（哪怕给出是深色还是浅色）就再好不过了。如果读到这篇文章的你恰巧知道获取通知栏背景颜色的方法，麻烦能分享给我，笔者不胜感激。","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"Android开发之启动页的作用","date":"2016-11-16T13:30:00.000Z","path":"2016/11/16/android_startup/","text":"前一篇文章所描述的登录功能逻辑并不复杂，与之相比登出功能更是特别简单，只需要跳转到登录Activity即可。值得注意的是，当用户登出后，需要将登出页的Activity以及之前的诸多Activity 全部清除，避免用户使用 后退 返回到前面打开过的Activity中。 应用程序启动页的设计为什么APP要有启动页？启动页有什么作用？ 启动页并不是为APP提供机会进行艺术展示，而是为了增强用户对应用程序能够快速启动并立即投入使用的感知度。实际上启动页相当于一个进度条的作用，APP需要在这个过程中完成 是否登录的验证、有无新版本待升级的验证 甚至 某些大型资源的加载 等等，待所有工作执行完毕，启动页跳转到下一个页面，给用户一个流畅的交互体验。 通常启动页只有一张带有LOGO的全屏图片，需要设置 android:background 为你的图片资源并将MainActivity的 theme设置为@android:style/Theme.NoTitleBar.FullScreen。启动页的内部逻辑，通常会判断用户的登录状态。在用户 第一次登陆成功之后，服务器会 根据用户的ID及登录时间生成一个token字符串并返回给客户端，客户端开发者需要将 token保存到SharedPreferences 中，在每次应用开启的时候验证token是否正确或过期，进而判断跳转到登录页或是主菜单页中。 笔者所开发APP还要在启动页判断 是否存在新版本并提醒用户升级，这就需要在向服务器请求后服务器返回的json数据中包含 最新版应用的版本号 及 下载地址。这地方出现了一个小插曲：客户端启动并发出请求，登录状态及版本信息可以压缩到一组json数据中，所以为了提高效率要尽可能 降低联网请求行为次数。后台在token正确的时候返回的数据很正常，可是在token不存在或不正确的情况下直接返回了 404，获取不到版本信息，我特地跟后端沟通之后重新定制了接口返回值后才解决了这个问题。 程序开发过程中，客户端与服务端要多商量细节的设计，避免产生不必要的麻烦。","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"Android开发之登录功能细节记录","date":"2016-11-14T12:30:00.000Z","path":"2016/11/14/android_login/","text":"博主作为一名Android开发新人参与的第一个项目，是开发一个直播软件，我负责信息验证、登录以及设置等功能的实现。坦白讲功能逻辑很简单，如果做Demo大概不过一天工夫。但如果要做得很漂亮，给用户一种非常好的使用体验，一些细节还真的需要仔细琢磨。下面我将分享一下在开发登录功能时遇到的一些值得记录的东西。 通常来说登录页面包含两个 EditText，分别对应使用者的账号密码（手机端验证码出现比较少，暂不考虑），不妨先来说说一款优秀的手机应用登录页面应该包含哪些人性化的小组件。 功能组件的设置1.很多应用的EditText为了给用户一个非常好的 交互感受，会在 左端 设计一个表示输入内容的 小图标。如“账号”出设置一个人头像，“密码”处设置一把锁头或钥匙，“搜索”处设置一个放大镜等等。这个时候要用到以下几个属性： 1234android:drawableLeft //设置位于EditText左边的小图标 android:paddingLeft //设置该图标距离EditText左端的距离 android:drawablePadding //设置hint或输入的文本与左边小图标的距离 android:hint //设置EditText在没有任何输入的时候显示的提示，设置后利于自定义下划线 2.由于Android 原生EditText 的下划线视觉体验非常一般，很多UI设计师选择设计其他样式或者颜色的下划线，这时候就需要 取消 原生EditText下划线的显示，而使用 ImageView 画一条下划线。 1android:background=\"@null\" //取消原生EditText下划线的显示 3.一个用户体验较好的EditText，还应该在输入框右端设置一个 × 图标，用于一键清空输入的文本信息。实现的方法类似于上述设置左端小图标，还需要补充的是在登录的Activity类中为 ImageView 设置 onclick() 方法，在方法中加入 EditText.setText(“”); 即可。 4.在登录Activity中，最好包含 记住账号密码 功能，为了操作简便笔者在登录成功后直接将账号和密码写入到 SharedPreferences 中，在 onCreate() 方法中读取账号密码并将二者 回显到EditText 中（因为是公司内部用的软件所以只考虑每部手机绑定一个账号，没有使用下拉列表）。如果要绑定多个账号密码请选择使用带下拉框的EditText进行回显。 值得深究的细节以上是登录页面的常规功能的实现，下面来说说开发登录功能时应该注意的小细节： 将EditText的 maxLines属性设为1。程序员们编程普遍的思想是先思考 我在使用这个APP的时候会做哪些事？，然后将这些事情解决就好了。但是产品经理或测试思考的是 一个傻瓜在使用这个APP的时候会做哪些事？，这就非常需要我们程序员们做好限制了。虽说一般不会有人的账号密码足够长到第二行去，也不会输入到一半莫名其妙按回车键，但如果真的有这种情况出现导致布局变形或是程序崩溃，最终需要负责任的仍然是我们程序员。 在EditText中 禁用回车键。原因同上，但实现起来却出现了一些状况。代码如下：12345678910111213141516@Override public boolean onEditorAction(TextView v, int actionId, KeyEvent event) &#123; switch (v.getId()) &#123; case R.id.et_username: if (event.getKeyCode() == KeyEvent.KEYCODE_ENTER) &#123; return true; &#125; return false; case R.id.et_password: if (event.getKeyCode() == KeyEvent.KEYCODE_ENTER) &#123; return true; &#125; return false; &#125; return false; &#125; 返回值为 true 代表你将该输入值拦截下来 自定义处理，为 false 则代表 不做任何处理。代码逻辑没有任何问题，回车键也确实已经失效，但当我在密码框输入密码后无意中按下了 完成 键时，程序报出空指针异常（三星输入法）。原因是三星键盘中 完成 键可以被onEditorAction() 方法拦截到，但特别奇怪的是 该按键为null，并不属于KeyEvent类型，所以 event.getKeyCode() 处会出现异常。解决的方法是：在 onEditorAction() 方法第一行先 判断传入的event对象是否为空。123if (event == null) &#123; return false; &#125;","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"从博弈论的角度理解2013微软编程之美资格赛题目——竞价","date":"2016-07-21T20:30:00.000Z","path":"2016/07/21/beauty_of_programming/","text":"这篇文章源自于笔者曾在大学学习运筹学期间的一次演讲，由于老师分配的时间不够等原因，个人当时表现的比较一般，很多同学可能连题目都没搞清楚就结束了。笔者觉得，该题是近几年来微软编程之美中最有趣的一道，无论你是否熟悉数学或编程，都可以看懂这道题目并产生一些自己的想法。 题目时间限制：1000ms 内存限制：256MB 描述 Alice和Bob都要向同一个商人购买钻石。商人手中有 N 颗钻石，他会将它们 一颗颗 地卖给他们，Alice和Bob通过竞价的方式来决定钻石的归属。具体的过程如下：商人首先指定其中一个人开始报价，之后两人轮流报价，要求是一定要比对方报的价格 更高。任何时候，如果一个人不愿出价或者出不起价钱时，可以宣布 弃权，则对手以最后一次报的价格将钻石买下。当然，如果两人都没钱，商人是不会卖钻石的。首次报价至少为 1，并且只能报 整数 的价钱。 Alice和Bob特别爱攀比，因此他们都希望 能比对方买到更多的钻石。Alice和Bob各自带了 CA 和 CB 的钱用于竞拍钻石。此外，Alice和商人有很不错的私人关系，因此商人总是会让 Alice先报价。现在请问，在Alice和Bob都用 最优策略 的情况下，谁能买到更多钻石？ 假设双方都知道对方手中的现金数量，以及商人将要拍卖的钻石数量 N。 输入 输入文件包含多组测试数据。 第一行，给出一个整数 T，为 数据组数。接下来依次给出每组测试数据。 每组数据为三个用空格隔开的整数 N，CA，CB，表示 钻石的数量，以及 双方带的现金数量。 输出 对于每组测试数据，输出一行 Case #X: Y，其中 X表示测试数据编号，Y的取值为{-1, 0, 1}，-1 表示Alice买到的钻石会比Bob 少，0 表示两人能买到 一样多，1 表示Alice能买到 更多 钻石。所有数据按读入顺序从1开始编号。 数据范围 1≤T≤1000 小数据：0≤N≤10; 0&lt;CA, CB≤10 大数据：0≤N≤105; 0&lt;CA, CB≤106 样例输入 2 4 3 5 7 4 7 样例输出 Case #1: 0 Case #2: 1 博弈论，论博弈在讨论博弈论之前，我想先谈谈 博弈。博弈的目的是 利益，利益形成博弈的基础。参与博弈者是为了自身收益的最大化才进行互相竞争。也就是说，参与博弈的各方形成相互竞争、相互对抗的关系， 以争得利益的多少来决定胜负，而一定的外部条件又决定了竞争和对抗的具体形式，这就形成了博弈。 博弈论的 4 个要素： 2个或2个以上的参与者。在博弈中存在一个必需的条件即不是一个人在一个毫无干扰的环境中做决策。博弈者的身边充斥着其他具有主观能动性的决策者，他们的选择与其他博弈者的选择相互作用、相互影响。这种互动关系自然会对博弈各方的思维和行动产生重要的影响，有时甚至直接影响博弈结果。 博弈要有参与各方争夺的资源或收益。资源指的不仅仅是自然资源，还有人文资源。人们之所以参与博弈是受到利益的吸引，因此预期将来所获得利益的大小直接影响到博弈的吸引力和参与者的关注程度。 参与者有自己能够选择的策略。策略，指的是直接、实用地针对某一个具体问题所采取的应对方式。通俗地说，策略就是计策，是博弈参与者所选择的手段方法。博弈论中的策略，是先对局势和整体状况进行分析确定局势特征，找出其中关键因素，为达到最重要的目标进行手段选择。博弈论中的策略是牵一发而动全身的，直接对整个局势造成重大影响。 参与者拥有一定量的信息。博弈就是个人或组织在一定的环境条件与既定的规则下，同时或先后，一次或是多次选择策略并实施从而得到某种结果的过程。本题中，Alice和Bob知道对方和钻石商人的一切信息，属于 完全信息博弈。 题目分析首先考虑钻石足够多的情况，即 CA+CB≤N，易知Alice和Bob谁拥有的钱多谁会获胜，一样多则为平局。 若 CA+CB＞N，我们先来简单分析一下Alice的想法。他如果想要赢得胜利就要尽可能消耗Bob的钱，不能让Bob轻易得到任何一颗钻石。（比如Bob只花费很少的钱买一颗钻石这种事是绝对不可能的，除非Alice没钱了。）但是他也必须通过抬价才能实现上述这个目的。但是Bob也知道Alice拥有的钱，如果Alice漫天要价，Bob就不需要继续跟。那么Alice抬价到多少合适呢？ 我们再分析一下Alice要抬高多少颗钻石的价格。Alice需要把所有的钻石的价格都抬到 CA/N 吗？显然不需要，注意Alice和Bob的目的仅仅是 买得比对方多，而不是买光所有的钻石。因此，设 n=[N/2]+1，我们可以知道Alice或者Bob最少拿到n颗钻石就可以获得胜利，所以Alice要把任意n颗钻石价格抬高到一个特定的数值。 （注：[x]表示不超过x的最大整数。） 接下来我们讨论一个命题的正确性： 仅仅在1颗钻石的竞价中，只会出现1次或2次报价，3次及以上的报价是毫无意义的。 由刚才的结论我们知道，Alice在心中有一个 标准价格（Bob也知道），所以如果Alice先开价，他就一定会开到这个价格。（开低了Bob就会跟，开高了Bob可以选择放弃。）但是在Alice开低价格的情况下，如果Bob跟的价格恰好是 标准价格，Alice则会面临一个很尴尬的情况—— 如果他选择跟，就相当于多花了1元钱而没有对Bob造成损失；如果他不跟，则相当于Bob少花了1元钱就买到了钻石。 综上，Alice只会开出 标准价格，而Bob也只有 两种选择——加一元或者是放弃。 题解竞价情况可以分为2种：N为奇数或偶数。因为N为奇数不会出现平局，N为偶数可能会出现平局。 N为奇数时：n=[N/2]+1，考虑CA/n，若能整除，显然 现金比较 胜负结果 CB≥(CA/n+1)*n Bob胜 CB＜(CA/n+1)*n Alice胜 若不能整除，则在n颗钻石中会出现一些价格为 [CA/n] 的和一些价格为 [CA/n]+1 的，易知 Bob只会在[CA/n]的钻石后跟价，即 现金比较 胜负结果 CB≥([CA/n]+1)*n Bob胜 CB＜([CA/n]+1)*n Alice胜 举个例子：下为N=5，CA=8，CB=9的情况——Bob胜利 人物 第1次 第2次 第3次 第4次 第5次 Alice 3 3 2 2 2 Bob 放弃 放弃 3 3 3 N为偶数时，n=[N/2]+1，由奇数情况易推知 现金比较 胜负结果 CB≥([CA/(n-1)]+1)*n Bob胜 CB≥([CA/n]+1)*(n-1) 平局 CB＜([CA/n]+1)*(n-1) Alice胜 第一个式子的含义是：Bob连平局的机会（即Alice只想买前一半数量的钻石）都没有给，在Alice最大程度的阻挠下依然赢得比赛所满足的条件。 第二个式子的含义是：Alice想赢得比赛，所以要给前n颗钻石抬价，但是Bob仍然有能力买下一半的钻石阻止Alice获胜。 至此，题目得到解决。","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]},{"title":"Git的基本配置","date":"2016-07-19T20:30:00.000Z","path":"2016/07/19/git_configuration/","text":"Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或大或小的项目。而由Git衍生出的项目托管平台，包括Github和Gitlab两种。开发者可以将开源项目免费托管在Github的云中，但私有库则需要付费。所以，基于节约开支、方便管理和安全性高等好处，诸多互联网公司选择在自己的服务器上搭建Gitlab来托管代码。 在初次接触到Git时，除了感慨版本控制系统的功能强大之外，遇到了很多配置的问题，现总结如下。 SSH Key配置在Git Bash中输入 ssh-keygen -t rsa -C “xxx@yourmail.com“ 后输入配置公钥密钥保存位置及密码，完成后登录至Github/GitLab网站并将.ssh文件下的id_rsa.pub文件中的密钥复制到Github/GitLab的SSH Keys选项添加认证。在本地Git Bash登录Github/GitLab账户，利用 ssh -T git@yourserver 确认登录。 123456789101112一些常用的Git命令： git clone git@yourproject.git //克隆原始仓库的项目到本地 git branch xxx //在本地新建xxx分支 git push origin xxx //将更新文件或新建分支推送到远程仓库xxx分支 git checkout xxx //切换到xxx分支上 git branch -d xxx //删除本地的xxx分支 git merge master //将当前分支与master分支合并 git add -A //将新增加的文件及被修改的文件添加到暂存区 git commit -m \"xxx\" //确认添加到暂存区的文件并生成记录 git log //查看所有的commit记录（注：退出记录按“Q”按键） git log --graph --pretty=oneline --abbrev-commit //树状展示commit记录 git pull origin master //从远程仓库master分支获取更新 一个小技巧：如果你常用Git Bash的话，一定要在 .gitconfig 文件中添加 [alias] 标签并自定义一些缩写方式，如“co = checkout”、“br = branch”、“ci = commit -m”等。 Git统一换行符Git支持的换行符有三种，分别为 CRLF(\\r\\n)、LF(\\n)、CR(\\r)，一般来说LF格式使用最为广泛，在此博主也推荐在开发过程中尽量统一格式为 LF（Intellij IDEA/Android studio中File-Line Separators设置）。当在Windows系统使用Git在保存文件修改操作时换行符报错，保证代码中只包含 一种 换行符并在 .gitconfig 文件中加入如下代码即可。 123[core] autocrlf = false //不进行格式转换 safecrlf = true //拒绝提交包含混合换行符的文件 取消新项目进行pull/push操作时输入密码在添加了SSH Key后，登陆已经不需要输入账号密码。但是在新项目pull和push操作时还是会输入账号密码，使用以下方法可以避免重复输入操作。 Git Bash进入Git的根路径，在我的电脑上是——C:\\Users\\xxx 在该路径下输入 touch .git-credentials 创建文件 继续输入“vim .git-credentials”编辑文件，如果是Github项目直接输入https://yourusername:yourpassword@github.com。但如果是Gitlab项目，笔者建议直接退出文件编辑而选择在GitBash中输入一遍账号密码（可自动添加到.git-credentials文件中而避免路径写错等问题）。 在Git Bash中输入 git config –global credential.helper store，成功后在 .gitconfig 文件中可以看到 helper = store 字符。 执行一次pull或push操作，输入一次账号密码后打开.git-credentials文件，是否发现多了一条 http(https)://yourusername:yourpassword@yourserver 记录？再次执行pull或push操作，已经不需要输入账号密码了。 总结熟练掌握Git的使用几乎是每个程序员的必经之路，Git的使用方式并不复杂，但笔者一路走来也遇到了不少坑。值得庆幸的是，很多优秀的集成开发环境已经将Git融入，使用起来更加简单且样式美观。不过我觉得还是应该掌握Git Bash的基础使用方法后再去使用其他Git UI，并非出于对命令窗口的执着，而是——源码 咱们都理解了，再用起来 封装 岂不是更熟练吗？","tags":[{"name":"往者可鉴","slug":"往者可鉴","permalink":"http://www.tingxiangshuixie.com/tags/往者可鉴/"}]}]